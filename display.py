from colors import Colors

def afficher_resultats(filepath, language, total_lines, alerts, alerts_per_category, alerts_per_line, file=None):
    """
    Affiche les rÃ©sultats d'analyse dans le terminal ou dans un fichier texte si "file" est prÃ©cisÃ©.
    Utilise les couleurs et les icÃ´nes dÃ©finies dans Colors.
    """

    # Fonction interne pour Ã©crire dans le terminal ou le fichier
    def echo(line):
        print(line, file=file)

    echo(f"\n{Colors.MAGENTA}ðŸ“„ Analyse du fichier ({language}) : {filepath}{Colors.RESET}")
    
    if not alerts:
        echo(f"\n{Colors.GREEN}âœ… Aucun motif suspect dÃ©tectÃ©.{Colors.RESET}")
        return

    for line_num, category, content in alerts:
        echo(f"  [Ligne {line_num:03}] {Colors.alert(category, content)}")

    echo(f"\n{Colors.YELLOW}ðŸ“Š Statistiques de lâ€™analyse :{Colors.RESET}")
    echo(f"  - Nombre total de lignes : {total_lines}")
    echo(f"  - Nombre total dâ€™alertes dÃ©tectÃ©es : {len(alerts)}")

    echo("  - RÃ©partition des alertes par catÃ©gorie :")
    for cat, count in alerts_per_category.items():
        echo(f"    â€¢ {cat} : {count}")

    echo("  - Lignes avec le plus dâ€™alertes :")
    top_lines = sorted(alerts_per_line.items(), key=lambda x: x[1], reverse=True)[:5]
    for line_num, count in top_lines:
        echo(f"    â€¢ Ligne {line_num} : {count} alertes")

    echo("\n" + "-" * 60 + "\n")

